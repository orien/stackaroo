name: CI

on:
  push:
  pull_request:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        cache: true
        cache-dependency-path: go.sum

    - name: Verify dependencies
      run: |
        go mod verify
        go mod tidy
        git diff --exit-code

    - name: Run tests
      run: go test -v ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        cache: true
        cache-dependency-path: go.sum

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        cache: true
        cache-dependency-path: go.sum

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        cache: true
        cache-dependency-path: go.sum

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -v -ldflags="-w -s" -o stackaroo-${{ matrix.goos }}-${{ matrix.goarch }}.exe .
        else
          go build -v -ldflags="-w -s" -o stackaroo-${{ matrix.goos }}-${{ matrix.goarch }} .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: stackaroo-${{ matrix.goos }}-${{ matrix.goarch }}
        path: stackaroo-*
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        cache: true

    - name: Download Linux build
      uses: actions/download-artifact@v4
      with:
        name: stackaroo-linux-amd64

    - name: Make binary executable
      run: chmod +x stackaroo-linux-amd64

    - name: Test CLI basics
      run: |
        ./stackaroo-linux-amd64 --help
        ./stackaroo-linux-amd64 --version || true # Allow failure if version not implemented
        ./stackaroo-linux-amd64 deploy --help

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Docker build
      run: |
        # Test that our Go binary can build in a minimal container
        docker run --rm -v "$PWD":/usr/src/app -w /usr/src/app golang:1.25-alpine go build -v .

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, integration-test]
    if: always()

    steps:
    - name: Workflow Status
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.lint.result }}" = "success" ] && \
           [ "${{ needs.security.result }}" = "success" ] && \
           [ "${{ needs.build.result }}" = "success" ] && \
           [ "${{ needs.integration-test.result }}" = "success" ]; then
          echo "✅ All CI checks passed!"
        else
          echo "❌ Some CI checks failed"
          exit 1
        fi
