AWSTemplateFormatVersion: '2010-09-09'
Description: 'Web Application Stack demonstrating CloudFormation list parameter usage'

Parameters:
  # List of Security Group IDs - demonstrates List<Type> parameter
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of security group IDs for the web application
    
  # List of Subnet IDs for the load balancer
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for the Application Load Balancer
    
  # List of instance types for Auto Scaling Group
  InstanceTypes:
    Type: CommaDelimitedList
    Description: Comma-delimited list of EC2 instance types
    Default: "t3.micro,t3.small"
    
  # List of target group ARNs
  TargetGroupArns:
    Type: CommaDelimitedList
    Description: List of target group ARNs for the Auto Scaling Group
    
  # Environment variables as key=value pairs
  EnvironmentVariables:
    Type: CommaDelimitedList
    Description: Environment variables for the application
    Default: "NODE_ENV=production,LOG_LEVEL=info"
    
  # List of allowed ports for security group rules
  WebPorts:
    Type: CommaDelimitedList
    Description: List of ports to allow in security group
    Default: "80,443"

  # Single parameters for comparison
  ApplicationName:
    Type: String
    Description: Name of the application
    Default: "stackaroo-web-app"
    
  MinSize:
    Type: Number
    Description: Minimum number of instances
    Default: 1
    
  MaxSize:
    Type: Number
    Description: Maximum number of instances
    Default: 3

Resources:
  # Launch Template using list parameters
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ApplicationName}-launch-template"
      LaunchTemplateData:
        ImageId: ami-0abcdef1234567890  # Amazon Linux 2 AMI
        InstanceType: !Select [0, !Ref InstanceTypes]  # Use first instance type as default
        SecurityGroupIds: !Ref SecurityGroupIds  # Direct list reference
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            service docker start
            
            # Parse environment variables and export them
            ENV_VARS="${EnvironmentVariables}"
            IFS=',' read -ra ADDR <<< "$ENV_VARS"
            for i in "${!ADDR[@]}"; do
              export ${ADDR[i]}
            done
            
            # Start application container
            docker run -d \
              --name web-app \
              -p 3000:3000 \
              --env-file <(env | grep -E '^(NODE_ENV|LOG_LEVEL|PORT)=') \
              nginx:alpine
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${ApplicationName}-instance"
              - Key: Application
                Value: !Ref ApplicationName

  # Auto Scaling Group using multiple list parameters
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${ApplicationName}-asg"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref MinSize
      VPCZoneIdentifier: !Ref SubnetIds  # List parameter for subnets
      TargetGroupARNs: !Split [',', !Join [',', !Ref TargetGroupArns]]  # Convert comma-delimited to list
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-asg-instance"
          PropagateAtLaunch: true
        - Key: Application
          Value: !Ref ApplicationName
          PropagateAtLaunch: true

  # Mixed Instance Types Policy - demonstrates using CommaDelimitedList
  MixedInstancesPolicy:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${ApplicationName}-mixed-asg"
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      VPCZoneIdentifier: !Ref SubnetIds
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 1
          OnDemandPercentageAboveBaseCapacity: 50
          SpotAllocationStrategy: diversified
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides: !Split
            - ','
            - !Sub
              - |
                ${inner}
              - inner: !Join
                - ','
                - - !Sub '{"InstanceType": "${InstanceType1}"}'
                  - !Sub '{"InstanceType": "${InstanceType2}"}'
              # This demonstrates accessing individual items from CommaDelimitedList
              - InstanceType1: !Select [0, !Split [',', !Join [',', !Ref InstanceTypes]]]
              - InstanceType2: !Select [1, !Split [',', !Join [',', !Ref InstanceTypes]]]

  # Security Group Rule using list parameter
  AdditionalSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Select [0, !Ref SecurityGroupIds]  # Use first security group
      IpProtocol: tcp
      FromPort: !Select [0, !Split [',', !Join [',', !Ref WebPorts]]]  # First port from list
      ToPort: !Select [0, !Split [',', !Join [',', !Ref WebPorts]]]
      CidrIp: 0.0.0.0/0
      Description: !Sub "Allow traffic on port ${WebPorts}"

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ec2/${ApplicationName}"
      RetentionInDays: 14

Outputs:
  # Output the resolved list parameters for reference
  SecurityGroupIds:
    Description: List of Security Group IDs used
    Value: !Join [',', !Ref SecurityGroupIds]
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupIds"
      
  SubnetIds:
    Description: List of Subnet IDs used  
    Value: !Join [',', !Ref SubnetIds]
    Export:
      Name: !Sub "${AWS::StackName}-SubnetIds"
      
  InstanceTypes:
    Description: List of instance types configured
    Value: !Join [',', !Ref InstanceTypes]
    Export:
      Name: !Sub "${AWS::StackName}-InstanceTypes"

  LaunchTemplateId:
    Description: Launch Template ID
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-LaunchTemplateId"
      
  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-ASGName"

  # Demonstrate accessing individual list items
  FirstSecurityGroupId:
    Description: First Security Group ID from the list
    Value: !Select [0, !Ref SecurityGroupIds]
    Export:
      Name: !Sub "${AWS::StackName}-FirstSecurityGroupId"
      
  FirstSubnetId:
    Description: First Subnet ID from the list  
    Value: !Select [0, !Ref SubnetIds]
    Export:
      Name: !Sub "${AWS::StackName}-FirstSubnetId"

  # Show how to count list items
  SecurityGroupCount:
    Description: Number of Security Groups
    Value: !Ref SecurityGroupIds
    # Note: CloudFormation doesn't have a direct way to count list items
    # but you can reference the list itself